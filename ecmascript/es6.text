//
The let statement declares a block-scoped local variable,
optionally initializing it to a value.
//
const once declared it can be redeclare
//
Spread syntax (...)
it allows an iterable such as an array expression or string to be expanded in places where zero or more arguments (for function calls) or elements (for array literals) are expected,
or an object expression to be expanded in places where zero or more key-value pairs (for object literals) are expected.
example:
function sum(x, y, z) {
    return x + y + z;
  } 
  const numbers = [1, 2, 3];
  console.log(sum(...numbers));
  // expected output: 6
  console.log(sum.apply(null, numbers));
  // expected output: 6
//
Destructuring assignment
The destructuring assignment syntax is a JavaScript expression that makes it possible to unpack values from arrays, 
or properties from objects, into distinct variables.
example:
let a, b, rest;
[a, b] = [10, 20];

console.log(a);
// expected output: 10

console.log(b);
// expected output: 20

[a, b, ...rest] = [10, 20, 30, 40, 50];

console.log(rest);
// expected output: Array [30,40,50]
//
get – a function without arguments,
that works when a property is read,
set – a function with one argument,
that is called when the property is set,
enumerable – same as for data properties,
configurable – same as for data properties.


  
